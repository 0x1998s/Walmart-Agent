# 🛒 沃尔玛AI Agent平台 - Docker编排配置
# Walmart AI Agent Platform - Docker Compose Configuration

version: '3.8'

services:
  # ===== 数据库服务 =====
  postgres:
    image: postgres:15-alpine
    container_name: walmart-postgres
    environment:
      POSTGRES_DB: walmart_ai_agent
      POSTGRES_USER: walmart_admin
      POSTGRES_PASSWORD: walmart_secure_2024
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./data/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - walmart-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U walmart_admin -d walmart_ai_agent"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ===== Redis缓存服务 =====
  redis:
    image: redis:7-alpine
    container_name: walmart-redis
    command: redis-server --appendonly yes --requirepass walmart_redis_2024
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - walmart-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # ===== 向量数据库服务 =====
  chromadb:
    image: ghcr.io/chroma-core/chroma:latest
    container_name: walmart-chromadb
    environment:
      CHROMA_SERVER_AUTH_CREDENTIALS_FILE: "/chroma/server.htpasswd"
      CHROMA_SERVER_AUTH_CREDENTIALS_PROVIDER: "chromadb.auth.basic_authn.BasicAuthenticationServerProvider"
      CHROMA_SERVER_AUTH_PROVIDER: "chromadb.auth.basic_authn.BasicAuthServerProvider"
    volumes:
      - chromadb_data:/chroma/chroma
      - ./configs/chromadb/server.htpasswd:/chroma/server.htpasswd
    ports:
      - "8000:8000"
    networks:
      - walmart-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===== 后端API服务 =====
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: walmart-backend
    environment:
      - DATABASE_URL=postgresql://walmart_admin:walmart_secure_2024@postgres:5432/walmart_ai_agent
      - REDIS_URL=redis://:walmart_redis_2024@redis:6379/0
      - CHROMA_HOST=chromadb
      - CHROMA_PORT=8000
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
    volumes:
      - ./backend:/app
      - ./data/uploads:/app/uploads
      - ./logs:/app/logs
    ports:
      - "8080:8080"
    networks:
      - walmart-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      chromadb:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===== Celery异步任务处理器 =====
  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: walmart-celery-worker
    command: celery -A app.core.celery_app worker --loglevel=info --concurrency=4
    environment:
      - DATABASE_URL=postgresql://walmart_admin:walmart_secure_2024@postgres:5432/walmart_ai_agent
      - REDIS_URL=redis://:walmart_redis_2024@redis:6379/0
      - CHROMA_HOST=chromadb
      - CHROMA_PORT=8000
      - ENVIRONMENT=production
    volumes:
      - ./backend:/app
      - ./data/uploads:/app/uploads
      - ./logs:/app/logs
    networks:
      - walmart-network
    depends_on:
      - postgres
      - redis
      - backend
    restart: unless-stopped

  # ===== Celery任务监控 =====
  flower:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: walmart-flower
    command: celery -A app.core.celery_app flower --port=5555
    environment:
      - DATABASE_URL=postgresql://walmart_admin:walmart_secure_2024@postgres:5432/walmart_ai_agent
      - REDIS_URL=redis://:walmart_redis_2024@redis:6379/0
      - FLOWER_BASIC_AUTH=admin:walmart_flower_2024
    ports:
      - "5555:5555"
    networks:
      - walmart-network
    depends_on:
      - redis
      - celery-worker
    restart: unless-stopped

  # ===== 前端服务 =====
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: walmart-frontend
    environment:
      - REACT_APP_API_BASE_URL=http://localhost:8080/api/v1
      - REACT_APP_WS_URL=ws://localhost:8080/ws
      - REACT_APP_ENVIRONMENT=production
    ports:
      - "3000:80"
    networks:
      - walmart-network
    depends_on:
      - backend
    restart: unless-stopped

  # ===== Nginx反向代理 =====
  nginx:
    image: nginx:alpine
    container_name: walmart-nginx
    volumes:
      - ./configs/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./configs/nginx/ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    networks:
      - walmart-network
    depends_on:
      - frontend
      - backend
    restart: unless-stopped

  # ===== 监控服务 =====
  prometheus:
    image: prom/prometheus:latest
    container_name: walmart-prometheus
    volumes:
      - ./configs/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    networks:
      - walmart-network
    restart: unless-stopped

  # ===== 监控可视化 =====
  grafana:
    image: grafana/grafana:latest
    container_name: walmart-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=walmart_grafana_2024
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./configs/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./configs/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3001:3000"
    networks:
      - walmart-network
    depends_on:
      - prometheus
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  chromadb_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  walmart-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
